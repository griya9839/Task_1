import java.util.Scanner;
 
public class Guess{
 
    
    public static void
    guessingNumberGame()
    {
        
        Scanner obj = new Scanner(System.in);
 
        
        int num = 1 + (int)(100
                               * Math.random());
 
        
        int trail = 5;
 
        int i, corr_num;
 
        System.out.println(
            "A number is chosen"
            + " between 1 to 100.");
        System.out.println(  "You have to guess the number"
            + " within 5 trials.");
 
        // Iterate over K Trials
        for (i = 0; i < trail; i++) {
 
            System.out.println(
                "Guess the number:");
 
     
            corr_num = obj.nextInt();
 
            // If the number is guessed
            if (num == corr_num) {
                System.out.println(
                    "Congratulations!"
                    + " You guessed the number correct");
                break;
            }
            else if (num >corr_num
                     && i != trail - 1) {
            	System.out.println(
                       "OOPS! TRY AGAIN");
                System.out.println(
                    "The number is "
                    + "greater than " + corr_num);
            }
            else if (num < corr_num
                     && i != trail - 1) {
                System.out.println(
                    "The number is"
                    + " less than " + corr_num);
            }
        }
 
        if (i == trail) {
            System.out.println(
                "You have exhausted"
                + trail +" trials.");
 
            System.out.println(
                "The number was " + num);
        }
    }

    public static void
    main(String arg[])
    {
 
        guessingNumberGame();
    }
}








import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.util.Map;

private void processSwapRates(Document document, PreparedStatement preparedStatement,
                              String location, String businessDate, String prevDate) throws Exception {
    // Load JSON mapping
    ObjectMapper objectMapper = new ObjectMapper();
    Map<String, String> rateMapping = objectMapper.readValue(new File("config/rate_mapping.json"), Map.class);

    NodeList swapRatesNodes = document.getElementsByTagName("SwapRates");

    for (int i = 0; i < swapRatesNodes.getLength(); i++) {
        Node swapRatesNode = swapRatesNodes.item(i);

        if (isChildOfElement(swapRatesNode, "SwapCurve")) {
            continue; // Ignore SwapRates inside SwapCurve
        }

        if (swapRatesNode.getNodeType() == Node.ELEMENT_NODE) {
            Element swapRatesElement = (Element) swapRatesNode;
            String ccy = swapRatesElement.getAttribute("ccy");
            String originalRateFixingIndex = swapRatesElement.getAttribute("rateFixingIndex");

            NodeList quoteNodes = swapRatesElement.getElementsByTagName("Quote");

            for (int j = 0; j < quoteNodes.getLength(); j++) {
                Element quoteElement = (Element) quoteNodes.item(j);
                String term = quoteElement.getAttribute("term");
                String midRate = quoteElement.getAttribute("midRate");

                // Handle special "ON" case
                String indexTerm = "ON".equals(term) ? "1D" : term;

                // Construct mapping key
                String key = ccy + "/" + originalRateFixingIndex + "/" + indexTerm;

                // Lookup in JSON mapping
                String rateFixingIndex = rateMapping.getOrDefault(key, originalRateFixingIndex);

                String mkttype = determineMkttypeSwapRates(term);

                // Set values for the prepared statement
                preparedStatement.setString(1, location);
                preparedStatement.setString(2, "PARIS");
                preparedStatement.setString(3, "SUMMIT");
                preparedStatement.setString(4, "YCURVE");
                preparedStatement.setString(5, businessDate);
                preparedStatement.setString(6, prevDate);
                preparedStatement.setString(7, "MSSEOD");
                preparedStatement.setString(8, mkttype);
                preparedStatement.setString(9, term);
                preparedStatement.setNull(10, java.sql.Types.VARCHAR);
                preparedStatement.setDouble(11, Double.parseDouble(midRate));
                preparedStatement.setDouble(12, 0.0);
                preparedStatement.setDate(13, new java.sql.Date(System.currentTimeMillis()));
                preparedStatement.setString(14, ccy);
                preparedStatement.setString(15, rateFixingIndex);

                preparedStatement.addBatch();
            }
        }
    }
}
